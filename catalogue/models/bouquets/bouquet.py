from decimal import ROUND_HALF_UP, Decimal

from colorfield.fields import ColorField
from django.core.validators import MaxValueValidator, MinValueValidator
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.urls import reverse_lazy
from django.utils import timezone
from telegram.helpers import escape_markdown
from tinymce.models import HTMLField

from core.base_models import TimeStampAdbstractModel
from core.services.repositories import SiteRepository
from tg_bot import send_message_to_telegram
from tg_bot.utils import get_admins_chat_ids

from ..services import (
    CategoryAbstractModel,
    ItemReview,
    MetaDataAbstractModel,
    ProductAbstractModel,
    TaxPercent,
    generate_sku,
)


class Color(models.Model):
    name = models.CharField(
        max_length=15,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ",
        unique=True,
    )
    hex_code = ColorField(
        verbose_name="HEX –∫–æ–¥ —Ü–≤–µ—Ç–∞ (#f4678a –∫ –ø—Ä–∏–º–µ—Ä—É)",
        help_text="–í–≤–µ–¥–∏—Ç–µ HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: #FFFFFF (–±–µ–ª—ã–π) –∏–ª–∏ #FFF (—Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç).",
        unique=True,
    )

    class Meta:
        verbose_name = "–¶–≤–µ—Ç –±—É–∫–µ—Ç–∞"
        verbose_name_plural = "3. –¶–≤–µ—Ç–æ–≤—ã–µ –≥–∞–º–º—ã –±—É–∫–µ—Ç–æ–≤"

    def __str__(self):
        return f"{self.name} ({self.hex_code})"


class Flower(models.Model):
    name = models.CharField(
        max_length=30,
        verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ",
        unique=True,
    )

    class Meta:
        verbose_name = "–¶–≤–µ—Ç–æ–∫"
        verbose_name_plural = "2. –°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–æ–≤"

    def __str__(self):
        return self.name


class BouquetsListPageModel(models.Model):
    meta_tags = models.TextField(
        verbose_name="–ú–µ—Ç–∞-—Ç–µ–≥–∏",
        max_length=1000,
        default="""<title> | BlumenHorizon</title>
<meta name="description" content="–û–ø–∏—Å–∞–Ω–∏–µ">""",
    )

    class Meta:
        verbose_name = "–ú–µ—Ç–∞-—Ç–µ–≥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –±—É–∫–µ—Ç–æ–≤"
        verbose_name_plural = "–ú–µ—Ç–∞-—Ç–µ–≥–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –±—É–∫–µ—Ç–æ–≤"

    def __str__(self):
        return "–ú–µ—Ç–∞-—Ç–µ–≥–∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –±—É–∫–µ—Ç–æ–≤"


class BouquetCategory(
    CategoryAbstractModel, TimeStampAdbstractModel, MetaDataAbstractModel
):
    image = models.ImageField(
        verbose_name="–ö–∞—Ä—Ç–∏–Ω–∫–∞",
        upload_to="categories/%Y-%m-%d",
        default="defaults/no-image.webp",
    )
    image_alt = models.CharField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏", max_length=200)
    catalog_page_meta_tags = models.TextField(
        verbose_name="–ú–µ—Ç–∞-—Ç–µ–≥–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π",
        max_length=4000,
        default="""<title> | BlumenHorizon</title>
<meta name="description" content="–û–ø–∏—Å–∞–Ω–∏–µ">""",
    )
    description = HTMLField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", null=True)

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–∫–µ—Ç–∞"
        verbose_name_plural = "4. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–∫–µ—Ç–æ–≤"

    def __str__(self):
        return self.name

    def get_relative_url(self):
        return reverse_lazy(
            "catalogue:bouquets-category",
            kwargs={
                "category_slug": self.slug,
            },
        )


class BouquetSubcategory(
    CategoryAbstractModel, TimeStampAdbstractModel, MetaDataAbstractModel
):
    image = models.ImageField(
        verbose_name="–ö–∞—Ä—Ç–∏–Ω–∫–∞",
        upload_to="subcategories/%Y-%m-%d",
        default="defaults/no-image.webp",
    )
    image_alt = models.CharField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏", max_length=200)
    category = models.ForeignKey(
        BouquetCategory,
        on_delete=models.PROTECT,
        verbose_name="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",
        related_name="subcategories",
    )

    class Meta:
        verbose_name = "–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –±—É–∫–µ—Ç–∞"
        verbose_name_plural = "5. –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—É–∫–µ—Ç–æ–≤"

    def __str__(self):
        return f"{self.name} ({self.category.name})"

    def get_relative_url(self):
        return reverse_lazy(
            "catalogue:bouquets-subcategory",
            kwargs={
                "category_slug": self.category.slug,
                "subcategory_slug": self.slug,
            },
        )

    def clean_category(self):
        if self.category is None:
            self.is_active = False


class Bouquet(ProductAbstractModel):
    subcategory = models.ForeignKey(
        BouquetSubcategory,
        on_delete=models.PROTECT,
        verbose_name="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è",
        related_name="bouquets",
    )
    amount_of_flowers = models.IntegerField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –≤ –±—É–∫–µ—Ç–µ")
    diameter = models.IntegerField(verbose_name="–î–∏–∞–º–µ—Ç—Ä –±—É–∫–µ—Ç–∞")
    colors = models.ManyToManyField(
        Color,
        related_name="bouquet",
        verbose_name="–¶–≤–µ—Ç–æ–≤—ã–µ –≥–∞–º–º—ã –±—É–∫–µ—Ç–æ–≤",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –±—É–∫–µ—Ç.",
    )
    flowers = models.ManyToManyField(
        Flower,
        related_name="bouquets",
        verbose_name="–°–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–æ–≤",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ —Ü–≤–µ—Ç—ã –≤ –±—É–∫–µ—Ç–µ.",
    )
    sku = models.CharField(max_length=25, unique=True, default=generate_sku, null=True)
    tax_percent = models.ForeignKey(
        TaxPercent,
        default=1,
        on_delete=models.PROTECT,
        related_name="bouquets",
        verbose_name="–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞",
        help_text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–æ–≥–æ–≤—É—é —Å—Ç–∞–≤–∫—É, –ø—Ä–∏–º–µ–Ω–∏–º—É—é –∫ –¥–∞–Ω–Ω–æ–º—É –±—É–∫–µ—Ç—É. –í—ã—á–∏—Å–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–∫–∏–¥–∫–∏.",
    )

    class Meta:
        verbose_name = "–ë—É–∫–µ—Ç"
        verbose_name_plural = "1. –ë—É–∫–µ—Ç—ã"

    def __str__(self):
        return f"{self.name} ({self.diameter} —Å–º, {self.amount_of_flowers} —Ü–≤–µ—Ç–æ–≤)"

    def get_relative_url(self):
        return reverse_lazy(
            "catalogue:bouquet-details",
            kwargs={
                "category_slug": self.subcategory.category.slug,
                "subcategory_slug": self.subcategory.slug,
                "bouquet_slug": self.slug,
            },
        )

    @property
    def is_bouquet(self) -> bool:
        return True


class BouquetReview(ItemReview):
    item = models.ForeignKey(
        Bouquet,
        on_delete=models.CASCADE,
        related_name="reviews",
        verbose_name="–ë—É–∫–µ—Ç",
    )


@receiver(post_save, sender=BouquetReview)
def order_created(
    sender: BouquetReview,
    instance: BouquetReview,
    created,
    **kwargs,
):
    country = SiteRepository.get_country()
    city = SiteRepository.get_city()
    if created:
        review = instance
        text = (
            f"*–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –±—É–∫–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω!* üéâ\n\n"
            f"*ID –æ—Ç–∑—ã–≤–∞*: `{review.pk}`\n"
            f"*–°—Ç—Ä–∞–Ω–∞*: `{escape_markdown(country)}`\n"
            f"*–ì–æ—Ä–æ–¥*: `{escape_markdown(city)}`\n"
            f"*–ò–º—è –∞–≤—Ç–æ—Ä–∞*: `{escape_markdown(review.author_name)}`\n"
            f"*Email –∞–≤—Ç–æ—Ä–∞*: `{escape_markdown(review.email)}`\n"
            f"–í–ø–µ—Ä—ë–¥ –∑–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é! üöÄ"
        )
        send_message_to_telegram(text, get_admins_chat_ids())


class BouquetSize(models.Model):
    bouquet = models.ForeignKey(
        Bouquet, related_name="sizes", verbose_name="–ë—É–∫–µ—Ç", on_delete=models.CASCADE
    )
    amount_of_flowers = models.IntegerField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –≤ –±—É–∫–µ—Ç–µ")
    diameter = models.IntegerField(verbose_name="–î–∏–∞–º–µ—Ç—Ä –±—É–∫–µ—Ç–∞")
    price = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="–¶–µ–Ω–∞ —Ä–∞–∑–º–µ—Ä–∞",
        help_text="–¶–µ–Ω–∞ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ 10—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π, –¥–≤–∞ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞–≤–∞—é—â–∞—è –∑–∞–ø—è—Ç–∞—è. –¢.–µ. –¥–æ 99999999.99",
    )
    discount = models.IntegerField(
        validators=(
            MinValueValidator(0),
            MaxValueValidator(100),
        ),
        verbose_name="–°–∫–∏–¥–∫–∞",
        null=True,
        default=0,
    )
    discount_expiration_datetime = models.DateTimeField(
        verbose_name="–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏", default=timezone.now
    )

    @property
    def discount_price(self) -> float:
        discount = Decimal(self.discount)
        result = self.price * (1 - discount / 100) if discount else self.price
        return result.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)

    class Meta:
        verbose_name = "–†–∞–∑–º–µ—Ä –±—É–∫–µ—Ç–∞"
        verbose_name_plural = "–†–∞–∑–º–µ—Ä—ã –±—É–∫–µ—Ç–æ–≤"

    def __str__(self):
        return f"{self.diameter}cm, {self.price}—É.–µ."
