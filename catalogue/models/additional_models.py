from django.contrib.auth import get_user_model
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from telegram.helpers import escape_markdown
from tinymce.models import HTMLField

from catalogue.models.bouquets.bouquet import Bouquet
from catalogue.models.products.product import Product
from core.base_models import TimeStampAdbstractModel
from core.services.repositories import SiteRepository
from tg_bot import send_message_to_telegram
from tg_bot.utils import get_admins_chat_ids


class CatalogPageModel(models.Model):
    meta_tags = models.TextField(
        verbose_name="–ú–µ—Ç–∞-—Ç–µ–≥–∏",
        max_length=1000,
        default="""<title> | BlumenHorizon</title>
<meta name="description" content="–û–ø–∏—Å–∞–Ω–∏–µ">""",
    )
    description = HTMLField(verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ö–∞—Ç–∞–ª–æ–≥'", null=True)

    class Meta:
        verbose_name = "–°—Ç—Ä–∞–Ω–∏—Ü–∞ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª"
        verbose_name_plural = verbose_name

    def __str__(self):
        return "–°—Ç—Ä–∞–Ω–∏—Ü–∞ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª"


class IndividualQuestion(TimeStampAdbstractModel, models.Model):
    user = models.ForeignKey(
        get_user_model(),
        on_delete=models.CASCADE,
        related_name="individual_questions",
        verbose_name="–°–≤—è–∑–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç",
        null=True,
        blank=False,
    )
    contact_method = models.TextField(
        max_length=100,
        verbose_name="–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
    )
    recall_me = models.BooleanField(
        verbose_name="–†–∞–∑—Ä–µ—à–∏–ª –ª–∏ –∫–ª–∏–µ–Ω—Ç –∑–≤–æ–Ω–∏—Ç—å –µ–º—É", default=False
    )
    product = models.ForeignKey(
        Product,
        on_delete=models.SET_NULL,
        related_name="individual_question",
        verbose_name="–°–≤—è–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç",
        null=True,
        blank=True,
    )
    bouquet = models.ForeignKey(
        Bouquet,
        on_delete=models.SET_NULL,
        related_name="individual_question",
        verbose_name="–°–≤—è–∑–∞–Ω–Ω—ã–π –±—É–∫–µ—Ç",
        null=True,
        blank=True,
    )

    class Meta:
        verbose_name = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–µ"
        verbose_name_plural = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö"

    def __str__(self):
        return f"{self.user if self.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}"


@receiver(post_save, sender=IndividualQuestion)
def individual_question_created(
    sender, instance: IndividualQuestion, created, **kwargs
):
    country = SiteRepository.get_country()
    city = SiteRepository.get_city()
    if created:
        individual_question = instance
        text = (
            f"*–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É!* üéâ\n\n"
            f"*ID –∑–∞–∫–∞–∑–∞*: `{escape_markdown(str(individual_question.id))}`\n"
            f"*–°—Ç—Ä–∞–Ω–∞*: `{escape_markdown(country)}`\n"
            f"*–ì–æ—Ä–æ–¥*: `{escape_markdown(city)}`\n"
            f"*–ü—Ä–æ–¥—É–∫—Ç*: `{escape_markdown(individual_question.product.name if individual_question.product else individual_question.bouquet.name)}`\n"
            f"*–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏*: \n `{escape_markdown(individual_question.contact_method)}`\n\n"
            f"–í–ø–µ—Ä—ë–¥ –∑–∞ —Ä–∞–±–æ—Ç—É! üöÄ"
        )

        send_message_to_telegram(text, get_admins_chat_ids())
